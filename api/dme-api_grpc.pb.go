// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DmeApiServiceClient is the client API for DmeApiService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DmeApiServiceClient interface {
	Req(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyWithTime, error)
	Res(ctx context.Context, in *EmptyWithTime, opts ...grpc.CallOption) (*EmptyWithTime, error)
}

type dmeApiServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewDmeApiServiceClient(cc grpc.ClientConnInterface) DmeApiServiceClient {
	return &dmeApiServiceClient{cc}
}

func (c *dmeApiServiceClient) Req(ctx context.Context, in *RequestMessage, opts ...grpc.CallOption) (*EmptyWithTime, error) {
	out := new(EmptyWithTime)
	err := c.cc.Invoke(ctx, "/DmeApiService/Req", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *dmeApiServiceClient) Res(ctx context.Context, in *EmptyWithTime, opts ...grpc.CallOption) (*EmptyWithTime, error) {
	out := new(EmptyWithTime)
	err := c.cc.Invoke(ctx, "/DmeApiService/Res", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DmeApiServiceServer is the server API for DmeApiService service.
// All implementations must embed UnimplementedDmeApiServiceServer
// for forward compatibility
type DmeApiServiceServer interface {
	Req(context.Context, *RequestMessage) (*EmptyWithTime, error)
	Res(context.Context, *EmptyWithTime) (*EmptyWithTime, error)
	mustEmbedUnimplementedDmeApiServiceServer()
}

// UnimplementedDmeApiServiceServer must be embedded to have forward compatible implementations.
type UnimplementedDmeApiServiceServer struct {
}

func (UnimplementedDmeApiServiceServer) Req(context.Context, *RequestMessage) (*EmptyWithTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Req not implemented")
}
func (UnimplementedDmeApiServiceServer) Res(context.Context, *EmptyWithTime) (*EmptyWithTime, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Res not implemented")
}
func (UnimplementedDmeApiServiceServer) mustEmbedUnimplementedDmeApiServiceServer() {}

// UnsafeDmeApiServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DmeApiServiceServer will
// result in compilation errors.
type UnsafeDmeApiServiceServer interface {
	mustEmbedUnimplementedDmeApiServiceServer()
}

func RegisterDmeApiServiceServer(s grpc.ServiceRegistrar, srv DmeApiServiceServer) {
	s.RegisterService(&DmeApiService_ServiceDesc, srv)
}

func _DmeApiService_Req_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RequestMessage)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmeApiServiceServer).Req(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DmeApiService/Req",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmeApiServiceServer).Req(ctx, req.(*RequestMessage))
	}
	return interceptor(ctx, in, info, handler)
}

func _DmeApiService_Res_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(EmptyWithTime)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DmeApiServiceServer).Res(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/DmeApiService/Res",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DmeApiServiceServer).Res(ctx, req.(*EmptyWithTime))
	}
	return interceptor(ctx, in, info, handler)
}

// DmeApiService_ServiceDesc is the grpc.ServiceDesc for DmeApiService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var DmeApiService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "DmeApiService",
	HandlerType: (*DmeApiServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Req",
			Handler:    _DmeApiService_Req_Handler,
		},
		{
			MethodName: "Res",
			Handler:    _DmeApiService_Res_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "dme-api.proto",
}
